// server.js — full, working

// ===== Imports & Setup =====
const express = require("express");
const cors = require("cors");
const mongoose = require("mongoose");

// ⬇️ adjust if your path is different
const Report = require("./models/Report");

const PORT = process.env.PORT || 5000;
const MONGO_URI =
  process.env.MONGO_URI || "mongodb://127.0.0.1:27017/optometry";

const app = express();

// Basic middleware
app.use(cors());
app.use(express.json());

// Tag every response so we can verify which server is serving
app.use((req, res, next) => {
  res.set("X-Server-Tag", `server.js@${new Date().toISOString()}`);
  next();
});

console.log("✅ server.js booted at", new Date().toISOString());

// ===== Mongo Connection (skip if you connect elsewhere) =====
(async () => {
  try {
    if (mongoose.connection.readyState === 0) {
      await mongoose.connect(MONGO_URI, { dbName: "optometry" });
      console.log("✅ Mongo connected");
    }
  } catch (e) {
    console.error("❌ Mongo connect error:", e.message);
  }
})();

// (optional) print schema keys once so we know required fields if any
try {
  console.log("🧩 Report schema keys:", Object.keys(Report.schema.obj));
} catch {}

// ===== 84-key + FY helpers =====
const KEY_COUNT = 84;
const KEYS = Array.from({ length: KEY_COUNT }, (_, i) => `q${i + 1}`);

const MONTHS = [
  "April","May","June","July","August","September",
  "October","November","December","January","February","March"
];
const MONTH_INDEX = Object.fromEntries(MONTHS.map((m, i) => [m, i]));

function build84NumberObject(raw) {
  const out = {};
  for (let i = 0; i < KEY_COUNT; i++) {
    const k = KEYS[i];
    out[k] = Number(raw?.[k] ?? 0);
  }
  return out;
}
function to84Numbers(raw) {
  const arr = new Array(KEY_COUNT).fill(0);
  if (raw && typeof raw === "object" && !Array.isArray(raw)) {
    for (let i = 0; i < KEY_COUNT; i++) arr[i] = Number(raw[KEYS[i]] ?? 0);
  } else if (Array.isArray(raw)) {
    for (let i = 0; i < Math.min(KEY_COUNT, raw.length); i++) arr[i] = Number(raw[i] ?? 0);
  }
  return arr;
}
function plus84(a, b) {
  const out = new Array(KEY_COUNT);
  for (let i = 0; i < KEY_COUNT; i++) out[i] = Number(a[i] || 0) + Number(b[i] || 0);
  return out;
}
function object84FromArrayNumbers(arr) {
  const out = {};
  for (let i = 0; i < KEY_COUNT; i++) out[KEYS[i]] = Number(arr[i] || 0);
  return out;
}
function getFYStartYear(targetYear, targetMonth) {
  return (["January","February","March"].includes(targetMonth)) ? (Number(targetYear) - 1) : Number(targetYear);
}
function isMonthOnOrBefore(aMonth, aYear, bMonth, bYear) {
  const aIdx = MONTH_INDEX[aMonth], bIdx = MONTH_INDEX[bMonth];
  const aFY = getFYStartYear(aYear, aMonth);
  const bFY = getFYStartYear(bYear, bMonth);
  if (aFY !== bFY) return aFY < bFY;
  return aIdx <= bIdx;
}
function to84Strict(arr) {
  const out = new Array(KEY_COUNT).fill(0);
  if (!Array.isArray(arr)) return out;
  for (let i = 0; i < Math.min(arr.length, KEY_COUNT); i++) out[i] = Number(arr[i] || 0);
  return out;
}
function to84FromAny(src) {
  const out = new Array(KEY_COUNT).fill(0);
  if (Array.isArray(src)) {
    for (let i = 0; i < Math.min(src.length, KEY_COUNT); i++) out[i] = Number(src[i] || 0);
    return out;
  }
  if (src && typeof src === "object") {
    for (let i = 0; i < KEY_COUNT; i++) out[i] = Number(src[KEYS[i]] || 0);
    return out;
  }
  return out;
}

// ===== Health Check =====
app.get("/api/health", (req, res) => {
  res.json({
    ok: true,
    tag: "server.js",
    pid: process.pid,
    time: new Date().toISOString()
  });
});

/* ------------------------------------------------------------------ */
/*  TEMP DEBUG: POST /api/reports-debug (returns detailed error info)  */
/* ------------------------------------------------------------------ */
app.post("/api/reports-debug", async (req, res) => {
  try {
    const district = String(req.body?.district || "").trim();
    const institution = String(req.body?.institution || "").trim();
    const month = String(req.body?.month || "").trim();
    const year = String(req.body?.year || "").trim();

    if (!district || !institution || !month || !year) {
      return res.status(400).json({ error: "district, institution, month, year are required" });
    }

    const answers84Obj = build84NumberObject(req.body.answers || {});
    let cumulative84Obj;

    if (req.body.cumulative && Object.keys(req.body.cumulative).length) {
      cumulative84Obj = build84NumberObject(req.body.cumulative);
    } else {
      const fyStartYear = getFYStartYear(year, month);
      const priorReports = await Report.find({ district, institution });
      let cum = new Array(KEY_COUNT).fill(0);
      for (const r of priorReports) {
        const rMonth = String(r.month || "");
        const rYear = String(r.year || "");
        if (!rMonth || !rYear) continue;
        if (getFYStartYear(rYear, rMonth) === fyStartYear && isMonthOnOrBefore(rMonth, rYear, month, year)) {
          cum = plus84(cum, to84Numbers(r.answers));
        }
      }
      cum = plus84(cum, to84Numbers(answers84Obj));
      cumulative84Obj = object84FromArrayNumbers(cum);
    }

    const eyeBank = Array.isArray(req.body.eyeBank) ? req.body.eyeBank : [];
    const visionCenter = Array.isArray(req.body.visionCenter) ? req.body.visionCenter : [];

    const filter = { district, institution, month, year };
    const update = {
      district, institution, month, year,
      answers: answers84Obj,
      cumulative: cumulative84Obj,
      eyeBank, visionCenter,
      updatedAt: new Date()
    };
    const options = { upsert: true, new: true, setDefaultsOnInsert: true };

    console.log("🧪 /api/reports-debug saving with", { district, institution, month, year, q1: answers84Obj.q1, cq1: cumulative84Obj.q1 });

    const doc = await Report.findOneAndUpdate(filter, update, options);
    return res.json({ ok: true, id: doc?._id, month, year });
  } catch (err) {
    console.error("❌ /api/reports-debug failed:", err);
    return res.status(500).json({
      error: "Failed to save report (debug)",
      name: err?.name,
      code: err?.code,
      message: err?.message,
      errors: err?.errors
        ? Object.fromEntries(
            Object.entries(err.errors).map(([k, v]) => [k, {
              name: v.name, message: v.message, kind: v.kind, path: v.path, value: v.value
            }])
          )
        : undefined
    });
  }
});

/* -------------------------------------------------------------- */
/*  NORMAL: POST /api/reports (upsert; computes FY cumulative)    */
/* -------------------------------------------------------------- */
app.post("/api/reports", async (req, res) => {
  try {
    const district = String(req.body?.district || "").trim();
    const institution = String(req.body?.institution || "").trim();
    const month = String(req.body?.month || "").trim();
    const year = String(req.body?.year || "").trim();

    if (!district || !institution || !month || !year) {
      return res.status(400).json({ error: "district, institution, month, year are required" });
    }

    const answers84Obj = build84NumberObject(req.body.answers || {});
    let cumulative84Obj;

    if (req.body.cumulative && Object.keys(req.body.cumulative).length) {
      cumulative84Obj = build84NumberObject(req.body.cumulative);
    } else {
      const fyStartYear = getFYStartYear(year, month);
      const priorReports = await Report.find({ district, institution });
      let cum = new Array(KEY_COUNT).fill(0);
      for (const r of priorReports) {
        const rMonth = String(r.month || "");
        const rYear = String(r.year || "");
        if (!rMonth || !rYear) continue;

        if (getFYStartYear(rYear, rMonth) === fyStartYear &&
            isMonthOnOrBefore(rMonth, rYear, month, year)) {
          const ans = to84Numbers(r.answers);
          cum = plus84(cum, ans);
        }
      }
      cum = plus84(cum, to84Numbers(answers84Obj));
      cumulative84Obj = object84FromArrayNumbers(cum);
    }

    const eyeBank = Array.isArray(req.body.eyeBank) ? req.body.eyeBank : [];
    const visionCenter = Array.isArray(req.body.visionCenter) ? req.body.visionCenter : [];

    const filter = { district, institution, month, year };
    const update = {
      district, institution, month, year,
      answers: answers84Obj,
      cumulative: cumulative84Obj,
      eyeBank, visionCenter,
      updatedAt: new Date()
    };
    const options = { upsert: true, new: true, setDefaultsOnInsert: true };

    const doc = await Report.findOneAndUpdate(filter, update, options);
    return res.json({ ok: true, id: doc?._id, month, year });
  } catch (err) {
    console.error("❌ POST /api/reports failed:", err?.message || err);
    return res.status(500).json({ error: "Failed to save report" });
  }
});

/* ----------------------------------------------------------------------- */
/*  GET /api/district-institution-report  (always returns 84-length arrays)*/
/* ----------------------------------------------------------------------- */
app.get("/api/district-institution-report", async (req, res) => {
  const month = String(req.query?.month || "").trim();
  const year = String(req.query?.year || "").trim();
  const district = String(req.query?.district || "").trim();

  console.log("✅ GET /api/district-institution-report", { month, year, district });

  if (!month || !year || !district) {
    return res.status(400).json({ error: "Month, year, and district are required" });
  }

  try {
    const reports = await Report.find({ district });

    const byInst = new Map();
    const ensureInst = (name) => {
      if (!byInst.has(name)) {
        byInst.set(name, {
          name,
          monthData: new Array(KEY_COUNT).fill(0),
          cumulativeData: new Array(KEY_COUNT).fill(0),
        });
      }
      return byInst.get(name);
    };

    for (const r of reports) {
      const instName = r.institution || "";
      // skip coordinators
      if (instName.startsWith("DC ") || instName.startsWith("DOC ")) continue;

      const inst = ensureInst(instName);

      // Monthly data only for the selected month+year
      if (String(r.month) === month && String(r.year) === year) {
        const ans84 = to84FromAny(r.answers);
        for (let i = 0; i < KEY_COUNT; i++) inst.monthData[i] = ans84[i];
      }

      // Cumulative: add across all saved reports for that institution
      const cum84 = to84FromAny(r.cumulative);
      for (let i = 0; i < KEY_COUNT; i++) inst.cumulativeData[i] += cum84[i];
    }

    const institutions = Array.from(byInst.values()).map((inst) => ({
      name: inst.name,
      monthData: to84Strict(inst.monthData),
      cumulativeData: to84Strict(inst.cumulativeData),
    }));

    let districtMonthTotal = new Array(KEY_COUNT).fill(0);
    let districtCumulativeTotal = new Array(KEY_COUNT).fill(0);

    for (const inst of institutions) {
      for (let i = 0; i < KEY_COUNT; i++) {
        districtMonthTotal[i] += Number(inst.monthData[i] || 0);
        districtCumulativeTotal[i] += Number(inst.cumulativeData[i] || 0);
      }
    }

    districtMonthTotal = to84Strict(districtMonthTotal);
    districtCumulativeTotal = to84Strict(districtCumulativeTotal);

    if (institutions.length > 0) {
      console.log("🔎 lengths:",
        institutions[0].monthData.length,
        institutions[0].cumulativeData.length,
        districtMonthTotal.length,
        districtCumulativeTotal.length
      );
    } else {
      console.log("🔎 no institutions found for district:", district);
    }

    return res.json({
      institutions,
      districtPerformance: {
        monthData: districtMonthTotal,
        cumulativeData: districtCumulativeTotal,
      },
    });
  } catch (err) {
    console.error("❌ Error in /api/district-institution-report:", err?.message || err);
    return res.status(500).json({ error: "Internal server error" });
  }
});

/* -------------------------------------------------------------- */
/*  GET /api/reports — list saved reports (optional filters)      */
/*  supports ?month=&year=&district=&institution=                 */
/* -------------------------------------------------------------- */
app.get("/api/reports", async (req, res) => {
  try {
    const { month, year, district, institution } = req.query || {};
    const q = {};
    if (month) q.month = String(month);
    if (year) q.year = String(year);
    if (district) q.district = String(district);
    if (institution) q.institution = String(institution);

    const docs = await Report.find(q)
      .select("_id district institution month year updatedAt")
      .lean();

    // Sort: year desc, then Apr→Mar order, then institution asc
    const FY_MONTHS = ["April","May","June","July","August","September","October","November","December","January","February","March"];
    const ORDER = Object.fromEntries(FY_MONTHS.map((m,i)=>[m,i]));
    docs.sort((a,b) => {
      const ya = Number(a.year), yb = Number(b.year);
      if (ya !== yb) return yb - ya;
      const ma = ORDER[a.month] ?? 99, mb = ORDER[b.month] ?? 99;
      if (ma !== mb) return ma - mb;
      return (a.institution||"").localeCompare(b.institution||"");
    });

    res.json(docs); // 200 OK with [] if none
  } catch (e) {
    console.error("GET /api/reports error:", e);
    res.status(500).json({ error: "Failed to load reports" });
  }
});

/* -------------------------------------------------------------- */
/*  Simple DEV auth endpoints (for Login/Register in the UI)      */
/* -------------------------------------------------------------- */
app.post("/api/login", (req, res) => {
  const { username, password, district, institution } = req.body || {};
  if (!username || !password || !district || !institution) {
    return res
      .status(400)
      .json({ error: "username, password, district, and institution are required" });
  }
  const isDoc = /^DC\s/i.test(institution || username);
  return res.json({
    ok: true,
    user: {
      username,
      district,
      institution,
      role: isDoc ? "DOC" : "USER",
      isDoc,
    },
    token: "dev-token",
  });
});

app.post("/api/register", (req, res) => {
  const { username, password, district, institution } = req.body || {};
  if (!username || !password) {
    return res.status(400).json({ error: "username and password are required" });
  }
  return res.json({ ok: true, user: { username, district, institution } });
});

// ===== Start server =====
app.listen(PORT, () => {
  console.log(`🚀 API listening on http://localhost:${PORT}`);
});
